{
    "pipes": [],
    "interfaces": [
        {
            "name": "AuthFormData",
            "id": "interface-AuthFormData-12171e0597e716d652d33eac89cb17be",
            "file": "src/layouts/auth/models/interfaces.ts",
            "type": "interface",
            "sourceCode": "export interface AuthFormData {\n  title: string;\n  oppositeFormName: string;\n  oppositeFormLink: string;\n  submitButtonLink: string;\n}\n",
            "properties": [
                {
                    "name": "oppositeFormLink",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "oppositeFormName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "submitButtonLink",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Badge",
            "id": "interface-Badge-d6901824385b0ab35ddaef8cdb761370",
            "file": "projects/lib-badges/src/lib/services/badges.service.ts",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ICONS } from 'projects/lib-badges/src/lib/shared/svg-icon/icons-list';\n\nexport interface Badge {\n  name: string;\n  icon: ICONS;\n}\n\n@Injectable()\n\nexport class BadgesService {\n  constructor() {\n  }\n\n  private _badges: Badge[] = [\n    {\n      name: 'Bridge',\n      icon: ICONS.BICYCLE,\n    },\n    {\n      name: 'Energy',\n      icon: ICONS.STAR,\n    },\n    {\n      name: 'Data Analytics Champ',\n      icon: ICONS.ANALYTICS,\n    },\n    {\n      name: 'Fastest JOD',\n      icon: ICONS.BELL,\n    },\n    {\n      name: 'Consistent Cleaner',\n      icon: ICONS.BOOK,\n    },\n    {\n      name: 'Broadcast',\n      icon: ICONS.BROADCAST,\n    },\n    {\n      name: 'Data Analytics Champ',\n      icon: ICONS.ANALYTICS,\n    },\n    {\n      name: 'Data Analytics Champ',\n      icon: ICONS.ANALYTICS,\n    },\n    {\n      name: 'Data Analytics Champ',\n      icon: ICONS.ANALYTICS,\n    },\n  ];\n\n  getBadges(): Badge[] {\n    return this._badges;\n  }\n}\n",
            "properties": [
                {
                    "name": "icon",
                    "type": "ICONS",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Badge",
            "id": "interface-Badge-21b51ef818c2363b19dd6c3c489df6c0-1",
            "file": "src/layouts/user/pages/profile-page/services/badges.service.ts",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ICONS } from 'src/shared/components/svg-icon/icons-list';\n\nexport interface Badge {\n  name: string;\n  icon: ICONS;\n}\n\n@Injectable()\n\nexport class BadgesService {\n  constructor() {\n  }\n\n  private _badges: Badge[] = [\n    {\n      name: 'Bridge',\n      icon: ICONS.BICYCLE,\n    },\n    {\n      name: 'Energy',\n      icon: ICONS.STAR,\n    },\n    {\n      name: 'Data Analytics Champ',\n      icon: ICONS.ANALYTICS,\n    },\n    {\n      name: 'Fastest JOD',\n      icon: ICONS.BELL,\n    },\n    {\n      name: 'Consistent Cleaner',\n      icon: ICONS.BOOK,\n    },\n    {\n      name: 'Broadcast',\n      icon: ICONS.BROADCAST,\n    },\n    {\n      name: 'Data Analytics Champ',\n      icon: ICONS.ANALYTICS,\n    },\n    {\n      name: 'Data Analytics Champ',\n      icon: ICONS.ANALYTICS,\n    },\n    {\n      name: 'Data Analytics Champ',\n      icon: ICONS.ANALYTICS,\n    },\n  ];\n\n  getBadges(): Badge[] {\n    return this._badges;\n  }\n}\n",
            "properties": [
                {
                    "name": "icon",
                    "type": "ICONS",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "Badge-1"
        },
        {
            "name": "Board",
            "id": "interface-Board-e53b00daef9ad906e958694de13cf138",
            "file": "src/layouts/user/pages/profile-page/services/leader-board.service.ts",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ICONS } from 'src/shared/components/svg-icon/icons-list';\n\nexport interface Board {\n  text: string;\n  iconName: ICONS;\n  time: Date;\n}\n\n@Injectable()\nexport class LeaderBoardService {\n  private _list: Board[] = [\n    {\n      text: '30 maximum with 3 dots sssssssssss adawdaw dasawdawdawddadw',\n      iconName: ICONS.USER,\n      time: new Date()\n    },\n    {\n      text: '30 maximum with 3 dots sssssssssss adawdaw dasawdawdawddadw',\n      iconName: ICONS.USER,\n      time: new Date()\n    },\n    {\n      text: '30 maximum with 3 dots sssssssssss adawdaw dasawdawdawddadw',\n      iconName: ICONS.USER,\n      time: new Date()\n    },\n\n  ];\n\n  getList(): Board[] {\n    return this._list;\n  }\n\n}\n",
            "properties": [
                {
                    "name": "iconName",
                    "type": "ICONS",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "text",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "time",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Card",
            "id": "interface-Card-8ab814b28dd59d13b3bee2e52b034c8b",
            "file": "src/layouts/user/pages/profile-page/services/card-skills.service.ts",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\n\nexport interface Card {\n  title: string;\n  date: Date;\n}\n\n@Injectable()\n\nexport class CardSkillsService {\n  constructor() {\n  }\n\n  private _cards: Card[] = [\n    {\n      title: 'IoT Development Platf orm Advan',\n      date: new Date(),\n    },\n    {\n      title: 'IoT Development Platf orm Advan',\n      date: new Date(),\n    },\n    {\n      title: 'IoT Development Platf orm Advan',\n      date: new Date(),\n    },\n    {\n      title: 'IoT Development Platf orm Advan',\n      date: new Date(),\n    },\n    {\n      title: 'IoT Development Platf orm Advan',\n      date: new Date(),\n    },\n    {\n      title: 'IoT Development Platf orm Advan',\n      date: new Date(),\n    }\n  ];\n\n  getCards(): Card[] {\n    return this._cards;\n  }\n}\n",
            "properties": [
                {
                    "name": "date",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "LinksList",
            "id": "interface-LinksList-925e606486a63b791d6e365cdd29a100",
            "file": "src/shared/components/header/links-list.ts",
            "type": "interface",
            "sourceCode": "export interface LinksList {\n  linkName: string;\n  link: string;\n}\n",
            "properties": [
                {
                    "name": "link",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "linkName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "PeriodicElement",
            "id": "interface-PeriodicElement-2c4d47fea0dbf80603c1fa44e8e0844b",
            "file": "src/layouts/admin/pages/users/services/mock-data-table.service.ts",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\n\nexport interface PeriodicElement {\n  email: string;\n  role: string;\n  active: boolean;\n}\n\n@Injectable()\nexport class MockDataTableService {\n  private ELEMENT_DATA: PeriodicElement[] = [\n    {email: 'vlad@mail.ru', role: 'admin', active: true},\n    {email: 'lvfb@mail.ru', role: 'user', active: true},\n    {email: 'lvds23@mail.ru', role: 'user', active: false},\n  ];\n\n  getData(): PeriodicElement[] {\n    return this.ELEMENT_DATA;\n  }\n}\n",
            "properties": [
                {
                    "name": "active",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "email",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "role",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "BadgesService",
            "id": "injectable-BadgesService-d6901824385b0ab35ddaef8cdb761370",
            "file": "projects/lib-badges/src/lib/services/badges.service.ts",
            "properties": [
                {
                    "name": "_badges",
                    "defaultValue": "[\n    {\n      name: 'Bridge',\n      icon: ICONS.BICYCLE,\n    },\n    {\n      name: 'Energy',\n      icon: ICONS.STAR,\n    },\n    {\n      name: 'Data Analytics Champ',\n      icon: ICONS.ANALYTICS,\n    },\n    {\n      name: 'Fastest JOD',\n      icon: ICONS.BELL,\n    },\n    {\n      name: 'Consistent Cleaner',\n      icon: ICONS.BOOK,\n    },\n    {\n      name: 'Broadcast',\n      icon: ICONS.BROADCAST,\n    },\n    {\n      name: 'Data Analytics Champ',\n      icon: ICONS.ANALYTICS,\n    },\n    {\n      name: 'Data Analytics Champ',\n      icon: ICONS.ANALYTICS,\n    },\n    {\n      name: 'Data Analytics Champ',\n      icon: ICONS.ANALYTICS,\n    },\n  ]",
                    "type": "Badge[]",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getBadges",
                    "args": [],
                    "optional": false,
                    "returnType": "Badge[]",
                    "typeParameters": [],
                    "line": 54
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ICONS } from 'projects/lib-badges/src/lib/shared/svg-icon/icons-list';\n\nexport interface Badge {\n  name: string;\n  icon: ICONS;\n}\n\n@Injectable()\n\nexport class BadgesService {\n  constructor() {\n  }\n\n  private _badges: Badge[] = [\n    {\n      name: 'Bridge',\n      icon: ICONS.BICYCLE,\n    },\n    {\n      name: 'Energy',\n      icon: ICONS.STAR,\n    },\n    {\n      name: 'Data Analytics Champ',\n      icon: ICONS.ANALYTICS,\n    },\n    {\n      name: 'Fastest JOD',\n      icon: ICONS.BELL,\n    },\n    {\n      name: 'Consistent Cleaner',\n      icon: ICONS.BOOK,\n    },\n    {\n      name: 'Broadcast',\n      icon: ICONS.BROADCAST,\n    },\n    {\n      name: 'Data Analytics Champ',\n      icon: ICONS.ANALYTICS,\n    },\n    {\n      name: 'Data Analytics Champ',\n      icon: ICONS.ANALYTICS,\n    },\n    {\n      name: 'Data Analytics Champ',\n      icon: ICONS.ANALYTICS,\n    },\n  ];\n\n  getBadges(): Badge[] {\n    return this._badges;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 11
            },
            "type": "injectable"
        },
        {
            "name": "BadgesService",
            "id": "injectable-BadgesService-21b51ef818c2363b19dd6c3c489df6c0-1",
            "file": "src/layouts/user/pages/profile-page/services/badges.service.ts",
            "properties": [
                {
                    "name": "_badges",
                    "defaultValue": "[\n    {\n      name: 'Bridge',\n      icon: ICONS.BICYCLE,\n    },\n    {\n      name: 'Energy',\n      icon: ICONS.STAR,\n    },\n    {\n      name: 'Data Analytics Champ',\n      icon: ICONS.ANALYTICS,\n    },\n    {\n      name: 'Fastest JOD',\n      icon: ICONS.BELL,\n    },\n    {\n      name: 'Consistent Cleaner',\n      icon: ICONS.BOOK,\n    },\n    {\n      name: 'Broadcast',\n      icon: ICONS.BROADCAST,\n    },\n    {\n      name: 'Data Analytics Champ',\n      icon: ICONS.ANALYTICS,\n    },\n    {\n      name: 'Data Analytics Champ',\n      icon: ICONS.ANALYTICS,\n    },\n    {\n      name: 'Data Analytics Champ',\n      icon: ICONS.ANALYTICS,\n    },\n  ]",
                    "type": "Badge[]",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getBadges",
                    "args": [],
                    "optional": false,
                    "returnType": "Badge[]",
                    "typeParameters": [],
                    "line": 54
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ICONS } from 'src/shared/components/svg-icon/icons-list';\n\nexport interface Badge {\n  name: string;\n  icon: ICONS;\n}\n\n@Injectable()\n\nexport class BadgesService {\n  constructor() {\n  }\n\n  private _badges: Badge[] = [\n    {\n      name: 'Bridge',\n      icon: ICONS.BICYCLE,\n    },\n    {\n      name: 'Energy',\n      icon: ICONS.STAR,\n    },\n    {\n      name: 'Data Analytics Champ',\n      icon: ICONS.ANALYTICS,\n    },\n    {\n      name: 'Fastest JOD',\n      icon: ICONS.BELL,\n    },\n    {\n      name: 'Consistent Cleaner',\n      icon: ICONS.BOOK,\n    },\n    {\n      name: 'Broadcast',\n      icon: ICONS.BROADCAST,\n    },\n    {\n      name: 'Data Analytics Champ',\n      icon: ICONS.ANALYTICS,\n    },\n    {\n      name: 'Data Analytics Champ',\n      icon: ICONS.ANALYTICS,\n    },\n    {\n      name: 'Data Analytics Champ',\n      icon: ICONS.ANALYTICS,\n    },\n  ];\n\n  getBadges(): Badge[] {\n    return this._badges;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 11
            },
            "type": "injectable",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "BadgesService-1"
        },
        {
            "name": "CardSkillsService",
            "id": "injectable-CardSkillsService-8ab814b28dd59d13b3bee2e52b034c8b",
            "file": "src/layouts/user/pages/profile-page/services/card-skills.service.ts",
            "properties": [
                {
                    "name": "_cards",
                    "defaultValue": "[\n    {\n      title: 'IoT Development Platf orm Advan',\n      date: new Date(),\n    },\n    {\n      title: 'IoT Development Platf orm Advan',\n      date: new Date(),\n    },\n    {\n      title: 'IoT Development Platf orm Advan',\n      date: new Date(),\n    },\n    {\n      title: 'IoT Development Platf orm Advan',\n      date: new Date(),\n    },\n    {\n      title: 'IoT Development Platf orm Advan',\n      date: new Date(),\n    },\n    {\n      title: 'IoT Development Platf orm Advan',\n      date: new Date(),\n    }\n  ]",
                    "type": "Card[]",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getCards",
                    "args": [],
                    "optional": false,
                    "returnType": "Card[]",
                    "typeParameters": [],
                    "line": 41
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\n\nexport interface Card {\n  title: string;\n  date: Date;\n}\n\n@Injectable()\n\nexport class CardSkillsService {\n  constructor() {\n  }\n\n  private _cards: Card[] = [\n    {\n      title: 'IoT Development Platf orm Advan',\n      date: new Date(),\n    },\n    {\n      title: 'IoT Development Platf orm Advan',\n      date: new Date(),\n    },\n    {\n      title: 'IoT Development Platf orm Advan',\n      date: new Date(),\n    },\n    {\n      title: 'IoT Development Platf orm Advan',\n      date: new Date(),\n    },\n    {\n      title: 'IoT Development Platf orm Advan',\n      date: new Date(),\n    },\n    {\n      title: 'IoT Development Platf orm Advan',\n      date: new Date(),\n    }\n  ];\n\n  getCards(): Card[] {\n    return this._cards;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 10
            },
            "type": "injectable"
        },
        {
            "name": "LeaderBoardService",
            "id": "injectable-LeaderBoardService-e53b00daef9ad906e958694de13cf138",
            "file": "src/layouts/user/pages/profile-page/services/leader-board.service.ts",
            "properties": [
                {
                    "name": "_list",
                    "defaultValue": "[\n    {\n      text: '30 maximum with 3 dots sssssssssss adawdaw dasawdawdawddadw',\n      iconName: ICONS.USER,\n      time: new Date()\n    },\n    {\n      text: '30 maximum with 3 dots sssssssssss adawdaw dasawdawdawddadw',\n      iconName: ICONS.USER,\n      time: new Date()\n    },\n    {\n      text: '30 maximum with 3 dots sssssssssss adawdaw dasawdawdawddadw',\n      iconName: ICONS.USER,\n      time: new Date()\n    },\n\n  ]",
                    "type": "Board[]",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getList",
                    "args": [],
                    "optional": false,
                    "returnType": "Board[]",
                    "typeParameters": [],
                    "line": 31
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ICONS } from 'src/shared/components/svg-icon/icons-list';\n\nexport interface Board {\n  text: string;\n  iconName: ICONS;\n  time: Date;\n}\n\n@Injectable()\nexport class LeaderBoardService {\n  private _list: Board[] = [\n    {\n      text: '30 maximum with 3 dots sssssssssss adawdaw dasawdawdawddadw',\n      iconName: ICONS.USER,\n      time: new Date()\n    },\n    {\n      text: '30 maximum with 3 dots sssssssssss adawdaw dasawdawdawddadw',\n      iconName: ICONS.USER,\n      time: new Date()\n    },\n    {\n      text: '30 maximum with 3 dots sssssssssss adawdaw dasawdawdawddadw',\n      iconName: ICONS.USER,\n      time: new Date()\n    },\n\n  ];\n\n  getList(): Board[] {\n    return this._list;\n  }\n\n}\n",
            "type": "injectable"
        },
        {
            "name": "MockDataTableService",
            "id": "injectable-MockDataTableService-2c4d47fea0dbf80603c1fa44e8e0844b",
            "file": "src/layouts/admin/pages/users/services/mock-data-table.service.ts",
            "properties": [
                {
                    "name": "ELEMENT_DATA",
                    "defaultValue": "[\n    {email: 'vlad@mail.ru', role: 'admin', active: true},\n    {email: 'lvfb@mail.ru', role: 'user', active: true},\n    {email: 'lvds23@mail.ru', role: 'user', active: false},\n  ]",
                    "type": "PeriodicElement[]",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getData",
                    "args": [],
                    "optional": false,
                    "returnType": "PeriodicElement[]",
                    "typeParameters": [],
                    "line": 17
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\n\nexport interface PeriodicElement {\n  email: string;\n  role: string;\n  active: boolean;\n}\n\n@Injectable()\nexport class MockDataTableService {\n  private ELEMENT_DATA: PeriodicElement[] = [\n    {email: 'vlad@mail.ru', role: 'admin', active: true},\n    {email: 'lvfb@mail.ru', role: 'user', active: true},\n    {email: 'lvds23@mail.ru', role: 'user', active: false},\n  ];\n\n  getData(): PeriodicElement[] {\n    return this.ELEMENT_DATA;\n  }\n}\n",
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-a0db91bfa3b9914e9048612074084ee6",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl) as Promise<unknown>;\n  }\n\n  getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText() as Promise<string>;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AdminLayoutComponent",
            "id": "component-AdminLayoutComponent-47017919a1fb7f4691d56f8982f230b5",
            "file": "src/layouts/admin/admin-layout.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "admin-layout",
            "styleUrls": [
                "./admin-layout.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./admin-layout.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'Angular Best Practices'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'admin-layout',\n  templateUrl: './admin-layout.component.html',\n  styleUrls: ['./admin-layout.component.scss']\n})\nexport class AdminLayoutComponent implements OnInit {\n  title = 'Angular Best Practices';\n  constructor() {\n  }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"src/styles/theme\";\n.grid-container {\n  height: 100%;\n  display: grid;\n  grid-gap: px2em(10);\n  grid-template-rows: px2em(60) auto px2em(40);\n  background-color: $layout-background-color;\n\n  shared-header{\n    background-color: $admin-header-background-color;\n  }\n\n  footer {\n    @extend %d-flex-start;\n    background-color: $footer-background-color;\n\n    span {\n      margin-left: $lg-screen-gutter;\n    }\n  }\n}\n",
                    "styleUrl": "./admin-layout.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"grid-container\">\n  <shared-header [title]=\"title\"></shared-header>\n  <div class=\"main\">\n    <router-outlet></router-outlet>\n  </div>\n  <footer>\n    <span>Footer</span>\n  </footer>\n</div>\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-4ccec75ff6c31bb0f2d2ec12575c1a56",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'Angular Best Practices'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\n\nexport class AppComponent {\n  title = 'Angular Best Practices';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"src/styles/theme\";\n\n.grid-container {\n  height: 100%;\n  display: grid;\n  grid-gap: px2em(10);\n  grid-template-rows: px2em(60) auto px2em(40);\n  background-color: $layout-background-color;\n\n  shared-header {\n    background-color: $user-header-background-color;\n  }\n\n  footer {\n    @extend %d-flex-start;\n    background-color: $footer-background-color;\n\n    span {\n      margin-left: $lg-screen-gutter;\n    }\n  }\n}\n",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<router-outlet></router-outlet>\n\n"
        },
        {
            "name": "AuthFormComponent",
            "id": "component-AuthFormComponent-be42ee997f6b0b02d35b9ad7f60d8a7c",
            "file": "src/layouts/auth/components/auth-form/auth-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "auth-form",
            "styleUrls": [
                "./auth-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./auth-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "data",
                    "line": 18,
                    "type": ""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_data",
                    "type": "AuthFormData",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "form",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "hide",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [
                {
                    "name": "getErrorMessage",
                    "args": [
                        {
                            "name": "controlName",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 40,
                    "jsdoctags": [
                        {
                            "name": "controlName",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 36,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthFormData } from 'src/layouts/auth/models/interfaces';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'auth-form',\n  templateUrl: './auth-form.component.html',\n  styleUrls: ['./auth-form.component.scss']\n})\nexport class AuthFormComponent implements OnInit {\n  private _data: AuthFormData;\n\n  constructor(private fb: FormBuilder, private router: Router) {\n  }\n\n  @Input()\n  set data(value: AuthFormData) {\n    this._data = value;\n  }\n\n  get data(): AuthFormData {\n    return this._data;\n  }\n\n  form: FormGroup;\n  hide = true;\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.email]]\n    });\n  }\n\n  async onSubmit(): Promise<void> {\n    await this.router.navigateByUrl(this.data.submitButtonLink);\n  }\n\n  getErrorMessage(controlName: string): string {\n    if (this.form.get(controlName).hasError('required')) {\n      return 'You must enter a value';\n    }\n\n    return this.form.get(controlName).hasError(controlName) ? `Not a valid ${controlName}` : '';\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"src/styles/theme\";\n\n.login-form-wrapper {\n  background-color: $auth-form-background;\n  border-radius: px2em(10);\n  @extend %shadow-material;\n\n  h3 {\n    padding: px2em(20);\n  }\n\n  form {\n    @extend %d-flex-column-between;\n    padding: 0 px2em(40);\n\n    .inputs-wrapper {\n      @extend %d-flex-column-between;\n      min-height: px2em(150);\n\n      mat-form-field {\n        min-width: px2em(300);\n\n        i {\n          cursor: pointer;\n        }\n      }\n    }\n\n    button {\n      margin: px2em(30) 0;\n    }\n  }\n\n  .register-link-block {\n    @extend %d-flex-column-center;\n    padding-bottom: px2em(10);\n    font: {\n      size: px2em(16);\n    };\n\n    span {\n      padding: px2em(10);\n      color: $base-link-color;\n      text-decoration: underline;\n      cursor: pointer;\n\n      &:hover {\n        color: darken($base-link-color, 20%);\n\n      }\n    }\n  }\n}\n\n",
                    "styleUrl": "./auth-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "data": {
                    "name": "data",
                    "setSignature": {
                        "name": "data",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 18,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "data",
                        "type": "",
                        "returnType": "AuthFormData",
                        "line": 22
                    }
                }
            },
            "templateData": "<div class=\"login-form-wrapper\">\n  <h3>{{data.title}}</h3>\n  <form (ngSubmit)=\"onSubmit()\" [formGroup]=\"form\">\n    <div class=\"inputs-wrapper\">\n      <mat-form-field>\n        <mat-label>Enter your email</mat-label>\n        <input matInput placeholder=\"pat@example.com\" formControlName=\"email\" required>\n        <mat-error *ngIf=\"form.get('email').invalid\">{{getErrorMessage('email')}}</mat-error>\n      </mat-form-field>\n      <mat-form-field>\n        <mat-label>Enter your password</mat-label>\n        <input matInput [type]=\"hide ? 'password' : 'text'\">\n        <i mat-icon-button matSuffix (click)=\"hide = !hide\" [attr.aria-label]=\"'Hide password'\"\n           [attr.aria-pressed]=\"hide\">\n          <mat-icon>{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\n        </i>\n      </mat-form-field>\n    </div>\n    <button mat-stroked-button color=\"primary\">{{data.title}}</button>\n  </form>\n\n  <div class=\"register-link-block\">\n    <span [routerLink]=\"data.oppositeFormLink\">{{data.oppositeFormName}}</span>\n    <span>Forgot your password?</span>\n  </div>\n\n</div>\n"
        },
        {
            "name": "AuthLayoutComponent",
            "id": "component-AuthLayoutComponent-b8782ba469716fe198baaafd8d50c09c",
            "file": "src/layouts/auth/auth-layout.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "auth-layout",
            "styleUrls": [
                "./auth-layout.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./auth-layout.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'auth-layout',\n  templateUrl: './auth-layout.component.html',\n  styleUrls: ['./auth-layout.component.scss']\n})\nexport class AuthLayoutComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"src/styles/theme\";\n\n.layout-wrapper {\n  position: absolute;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  @extend %d-flex-center;\n  grid-template-rows: auto;\n  background-color: $auth-layout-background;\n}\n",
                    "styleUrl": "./auth-layout.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"layout-wrapper\">\n  <router-outlet></router-outlet>\n</div>\n\n"
        },
        {
            "name": "BadgesComponent",
            "id": "component-BadgesComponent-c076498edcdc3b99ed182fed51369e81",
            "file": "projects/lib-badges/src/lib/badges/badges.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "mylib-badges",
            "styleUrls": [
                "./badges.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./badges.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "badge",
                    "line": 16,
                    "type": ""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_badge",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { Badge } from 'projects/lib-badges/src/lib/services/badges.service';\n\n@Component({\n  selector: 'mylib-badges',\n  templateUrl: './badges.component.html',\n  styleUrls: ['./badges.component.scss']\n})\n\nexport class BadgesComponent {\n  private _badge;\n  constructor() {\n  }\n\n  @Input()\n  set badge(value: Badge) {\n    this._badge = value;\n  }\n\n  get badge(): Badge {\n    return this._badge;\n  }\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"~projects/lib-badges/src/styles/theme\";\n:host {\n  width: 100%;\n  margin-top: px2em(20);\n  @extend %d-flex-line-center !optional;\n\n  .container {\n    @extend %d-flex-column-center !optional;\n\n    .circle {\n      @extend %d-flex-center !optional;\n      width: 80px;\n      height: 80px;\n      border-radius: 50%;\n      background: linear-gradient(#e66465, #9198e5);\n    }\n\n    span {\n      margin-top: px2em(10);\n    }\n  }\n}\n",
                    "styleUrl": "./badges.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 11
            },
            "accessors": {
                "badge": {
                    "name": "badge",
                    "setSignature": {
                        "name": "badge",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 16,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "badge",
                        "type": "",
                        "returnType": "Badge",
                        "line": 20
                    }
                }
            },
            "templateData": "<div class=\"container\">\n  <div class=\"circle\">\n    <mylib-svg-icon class=\"icon\" fill=\"fill:#fff\" width=\"50\" height=\"50\" [name]=\"badge.icon\"></mylib-svg-icon>\n  </div>\n  <span>{{badge.name}}</span>\n</div>\n"
        },
        {
            "name": "BadgesComponent",
            "id": "component-BadgesComponent-47edb156f33f5a490d62ca0e42cc5b4b-1",
            "file": "src/layouts/user/pages/profile-page/components/badges/badges.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-badges",
            "styleUrls": [
                "./badges.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./badges.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "badge",
                    "line": 17,
                    "type": ""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_badge",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { Badge } from 'src/layouts/user/pages/profile-page/services/badges.service';\n\n@Component({\n  selector: 'app-badges',\n  templateUrl: './badges.component.html',\n  styleUrls: ['./badges.component.scss']\n})\n\nexport class BadgesComponent {\n  private _badge;\n\n  constructor() {\n  }\n\n  @Input()\n  set badge(value: Badge) {\n    this._badge = value;\n  }\n\n  get badge(): Badge {\n    return this._badge;\n  }\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"src/styles/theme\";\n\n\n:host {\n  width: 100%;\n  margin-top: px2em(20);\n  @extend %d-flex-line-center;\n\n  .container {\n    @extend %d-flex-column-center;\n\n    .circle {\n      @extend %d-flex-center;\n      width: 80px;\n      height: 80px;\n      border-radius: 50%;\n      background: linear-gradient(#e66465, #9198e5);\n    }\n\n    span {\n      margin-top: px2em(10);\n    }\n\n\n  }\n}\n\n\n\n",
                    "styleUrl": "./badges.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 11
            },
            "accessors": {
                "badge": {
                    "name": "badge",
                    "setSignature": {
                        "name": "badge",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 17,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "badge",
                        "type": "",
                        "returnType": "Badge",
                        "line": 21
                    }
                }
            },
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "BadgesComponent-1",
            "templateData": "<div class=\"container\">\n  <div class=\"circle\">\n    <svg-icon class=\"icon\" fill=\"fill:#fff\" width=\"50\" height=\"50\" [name]=\"badge.icon\"></svg-icon>\n  </div>\n  <span>{{badge.name}}</span>\n</div>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-642c6c4e474cd5a0ac760dfda26b2fc9",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "description": "<p>Button contents</p>\n",
                    "line": 40
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "CardSkillsComponent",
            "id": "component-CardSkillsComponent-c15c8695d25c648dacd55b9a8f5ee14f",
            "file": "src/layouts/user/pages/profile-page/components/card-skills/card-skills.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "card-skills",
            "styleUrls": [
                "./card-skills.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./card-skills.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "card",
                    "line": 16,
                    "type": ""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_card",
                    "type": "Card",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_star",
                    "defaultValue": "ICONS.STAR",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { ICONS } from 'src/shared/components/svg-icon/icons-list';\nimport { Card } from 'src/layouts/user/pages/profile-page/services/card-skills.service';\n\n@Component({\n  selector: 'card-skills',\n  templateUrl: './card-skills.component.html',\n  styleUrls: ['./card-skills.component.scss']\n})\n\nexport class CardSkillsComponent {\n  public _star = ICONS.STAR;\n  private _card: Card;\n\n  @Input()\n  set card(value: Card) {\n    this._card = value;\n  }\n\n  get card(): Card {\n    return this._card;\n  }\n\n  constructor() {\n  }\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'src/styles/theme';\n\n.wrapper {\n  width: px2em(445);\n  height: px2em(175);\n  border-radius: 5px;\n  background-color: $user-layout-background;\n  margin-bottom: px2em(30);\n  margin-left: px2em(20);\n\n  .container {\n    @extend %d-grid;\n    grid-template-columns: 5fr 7fr;\n\n    .right-block{\n      margin-left: px2em(20);\n      margin-top: px2em(30);\n    }\n\n  }\n}\n",
                    "styleUrl": "./card-skills.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 22
            },
            "accessors": {
                "card": {
                    "name": "card",
                    "setSignature": {
                        "name": "card",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 16,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "card",
                        "type": "",
                        "returnType": "Card",
                        "line": 20
                    }
                }
            },
            "templateData": "<div class=\"wrapper\">\n  <div class=\"container\">\n    <div class=\"left-block\">\n      <svg-icon width=\"100%\" height=\"100%\" [name]=\"_star\"></svg-icon>\n    </div>\n    <div class=\"right-block\">\n      <h4>{{card.title}}</h4>\n      <span>{{card.date | date}}</span>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "CircleCompletedComponent",
            "id": "component-CircleCompletedComponent-c27c9fbb6bdf673907ab1a94bb5a395f",
            "file": "src/layouts/user/pages/profile-page/components/circle-completed/circle-completed.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "circle-completed",
            "styleUrls": [
                "./circle-completed.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./circle-completed.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'circle-completed',\n  templateUrl: './circle-completed.component.html',\n  styleUrls: ['./circle-completed.component.scss']\n})\n\nexport class CircleCompletedComponent {\n\n  constructor() {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"src/styles/theme\";\n\n.wrapper {\n  width: 100%;\n  margin-top: px2em(40);\n  @extend %d-flex-column-center;\n\n  .container {\n    @extend %d-flex-column-center;\n    width: 120px;\n    height: 120px;\n    border: px2em(5) solid #e0e0e0;\n    border-radius: 50%;\n\n    .text{\n      h1 {\n        font: {\n          weight: bold;\n        }\n      }\n    }\n\n\n\n  }\n\n}\n",
                    "styleUrl": "./circle-completed.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            },
            "templateData": "<div class=\"wrapper\">\n  <div class=\"container\">\n    <div class=\"text\">\n      <h1>3.9</h1>\n      <p>Hours</p>\n    </div>\n  </div>\n  <span>Learning completed</span>\n</div>\n"
        },
        {
            "name": "CircleProfileComponent",
            "id": "component-CircleProfileComponent-302eeb281e6891e4cbb0d5d4d943c590",
            "file": "src/layouts/user/pages/profile-page/components/circle-profile/circle-profile.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "circle-profile",
            "styleUrls": [
                "./circle-profile.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./circle-profile.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_user",
                    "defaultValue": "ICONS.USER",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { ICONS } from 'src/shared/components/svg-icon/icons-list';\n\n@Component({\n  selector: 'circle-profile',\n  templateUrl: './circle-profile.component.html',\n  styleUrls: ['./circle-profile.component.scss']\n})\n\nexport class CircleProfileComponent{\n  private _user = ICONS.USER;\n\n  constructor() {\n  }\n\n  get userIcon(): ICONS {\n    return this._user;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"src/styles/theme\";\n\n.wrapper {\n  width: 100%;\n  @extend %d-flex-center;\n\n  .container {\n    @extend %d-flex-column-center;\n\n    .circle{\n      @extend %d-flex-center;\n      width: 120px;\n      height: 120px;\n      border-radius: 50%;\n      background-color: #e0e0e0;\n    }\n\n  }\n\n}\n",
                    "styleUrl": "./circle-profile.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 11
            },
            "accessors": {
                "userIcon": {
                    "name": "userIcon",
                    "getSignature": {
                        "name": "userIcon",
                        "type": "",
                        "returnType": "ICONS",
                        "line": 16
                    }
                }
            },
            "templateData": "<div class=\"wrapper\">\n  <div class=\"container\">\n    <div class=\"circle\">\n      <svg-icon id=\"user-icon\" width=\"80\" height=\"80\" [name]=\"userIcon\"></svg-icon>\n    </div>\n    <span>Robin Hood</span>\n  </div>\n</div>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-246e2a69dc126a3bd76c6328dd3b93e2",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 53,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 62,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 56,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-b206621742d74756e548f335a8e6d1ed-1",
            "file": "src/shared/components/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "shared-header",
            "styleUrls": [
                "./header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "title",
                    "line": 71,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_linksAdmin",
                    "defaultValue": "[\n    {\n      linkName: 'Roles',\n      link: 'roles',\n    },\n    {\n      linkName: 'Users',\n      link: 'users',\n    },\n  ]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_linksUser",
                    "defaultValue": "[\n    {\n      linkName: 'Overview',\n      link: 'overview',\n    },\n    {\n      linkName: 'Settings',\n      link: 'settings',\n    },\n    {\n      linkName: 'Profile',\n      link: 'profile',\n    }\n  ]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_logo",
                    "defaultValue": "ICONS.ANGULAR",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_rightIcons",
                    "defaultValue": "[\n    ICONS.SEARCH,\n    ICONS.CURSOR,\n    ICONS.BELL,\n    ICONS.LIST,\n  ]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_typeUser",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "iconByName",
                    "args": [
                        {
                            "name": "index",
                            "type": "number"
                        },
                        {
                            "name": "name",
                            "type": "ICONS"
                        }
                    ],
                    "optional": false,
                    "returnType": "ICONS",
                    "typeParameters": [],
                    "line": 83,
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "name",
                            "type": "ICONS",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { ICONS } from 'src/shared/components/svg-icon/icons-list';\nimport { Router } from '@angular/router';\nimport { LinksList } from 'src/shared/components/header/links-list';\n\n@Component({\n  selector: 'shared-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.scss']\n})\nexport class HeaderComponent implements OnInit {\n  private _typeUser: string;\n  private _title: string;\n  private _logo = ICONS.ANGULAR;\n  private _rightIcons = [\n    ICONS.SEARCH,\n    ICONS.CURSOR,\n    ICONS.BELL,\n    ICONS.LIST,\n  ];\n  private _linksUser = [\n    {\n      linkName: 'Overview',\n      link: 'overview',\n    },\n    {\n      linkName: 'Settings',\n      link: 'settings',\n    },\n    {\n      linkName: 'Profile',\n      link: 'profile',\n    }\n  ];\n\n  private _linksAdmin = [\n    {\n      linkName: 'Roles',\n      link: 'roles',\n    },\n    {\n      linkName: 'Users',\n      link: 'users',\n    },\n  ];\n\n  constructor(private router: Router) {\n  }\n\n  get typeUser(): string {\n    return this._typeUser;\n  }\n\n  get logoIcon(): ICONS {\n    return this._logo;\n  }\n\n  get rightIcons(): ICONS[] {\n    return this._rightIcons;\n  }\n\n  get linksUser(): LinksList[] {\n    return this._linksUser;\n  }\n\n  get linksAdmin(): LinksList[] {\n    return this._linksAdmin;\n  }\n\n  @Input()\n  set title(value: string) {\n    this._title = value;\n  }\n\n  get title(): string {\n    return this._title;\n  }\n\n  ngOnInit(): void {\n    this._typeUser = this.router.url.split('/')[1];\n  }\n\n  iconByName(index: number, name: ICONS): ICONS {\n    return name;\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"src/styles/theme\";\n\n.wrapper {\n  height: 100%;\n  @extend %d-flex-between;\n\n  .title {\n    font: {\n      family: $base-regular-font;\n      size: px2em(20);\n    };\n  }\n\n  .nav {\n    ul {\n      @extend %d-flex-between;\n\n      li {\n        margin-left: px2em(50);\n        list-style-type: none;\n        a{\n          text-decoration: none;\n          color: black;\n        }\n      }\n    }\n\n  }\n\n  .left-block {\n    @extend %d-flex-between;\n    margin-left: $lg-screen-gutter;\n\n    svg-icon {\n      margin-right: px2em(10);\n    }\n  }\n\n  .right-block {\n    @extend %d-flex-between;\n    width: auto;\n    margin-right: $lg-screen-gutter;\n\n    svg-icon {\n      margin-right: px2em(20);\n    }\n\n  }\n}\n",
                    "styleUrl": "./header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 45,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "typeUser": {
                    "name": "typeUser",
                    "getSignature": {
                        "name": "typeUser",
                        "type": "string",
                        "returnType": "string",
                        "line": 50
                    }
                },
                "logoIcon": {
                    "name": "logoIcon",
                    "getSignature": {
                        "name": "logoIcon",
                        "type": "",
                        "returnType": "ICONS",
                        "line": 54
                    }
                },
                "rightIcons": {
                    "name": "rightIcons",
                    "getSignature": {
                        "name": "rightIcons",
                        "type": "[]",
                        "returnType": "ICONS[]",
                        "line": 58
                    }
                },
                "linksUser": {
                    "name": "linksUser",
                    "getSignature": {
                        "name": "linksUser",
                        "type": "[]",
                        "returnType": "LinksList[]",
                        "line": 62
                    }
                },
                "linksAdmin": {
                    "name": "linksAdmin",
                    "getSignature": {
                        "name": "linksAdmin",
                        "type": "[]",
                        "returnType": "LinksList[]",
                        "line": 66
                    }
                },
                "title": {
                    "name": "title",
                    "setSignature": {
                        "name": "title",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 71,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "title",
                        "type": "string",
                        "returnType": "string",
                        "line": 75
                    }
                }
            },
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "HeaderComponent-1",
            "templateData": "<div class=\"wrapper\">\n  <div class=\"left-block\">\n    <svg-icon [name]=\"logoIcon\" width=\"40\" height=\"40\"></svg-icon>\n    <span class=\"title\">{{title}}</span>\n  </div>\n  <nav class=\"nav\">\n    <ul *ngIf=\"typeUser == 'user'\">\n      <li *ngFor=\"let link of linksUser\">\n        <a [routerLink]=link.link>{{link.linkName}}</a>\n      </li>\n    </ul>\n    <ul *ngIf=\"typeUser == 'admin'\">\n      <li *ngFor=\"let link of linksAdmin\">\n        <a [routerLink]=link.link>{{link.linkName}}</a>\n      </li>\n    </ul>\n  </nav>\n  <div class=\"right-block\">\n    <svg-icon width=\"20\" height=\"20\" *ngFor=\"let icon of rightIcons; trackBy:iconByName\" [name]=icon></svg-icon>\n  </div>\n</div>\n"
        },
        {
            "name": "LeaderBoardComponent",
            "id": "component-LeaderBoardComponent-ad88edda01eebbed9154246819e56563",
            "file": "src/layouts/user/pages/profile-page/components/leader-board/leader-board.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "leader-board",
            "styleUrls": [
                "leader-board.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "leader-board.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ind",
                    "line": 29,
                    "type": "number"
                },
                {
                    "name": "li",
                    "line": 20,
                    "type": ""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_dataIcon",
                    "defaultValue": "ICONS.BANK",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_ind",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_li",
                    "type": "Board",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { ICONS } from 'src/shared/components/svg-icon/icons-list';\nimport { Board } from 'src/layouts/user/pages/profile-page/services/leader-board.service';\n\n@Component({\n  selector: 'leader-board',\n  templateUrl: 'leader-board.component.html',\n  styleUrls: ['leader-board.component.scss']\n})\n\nexport class LeaderBoardComponent {\n  private _dataIcon = ICONS.BANK;\n  private _li: Board;\n  private _ind: number;\n\n  constructor() {\n  }\n\n  @Input()\n  set li(value: Board) {\n    this._li = value;\n  }\n\n  get li(): Board {\n    return this._li;\n  }\n\n  @Input()\n  set ind(value: number) {\n    this._ind = value;\n  }\n\n  get ind(): number {\n    return this._ind;\n  }\n\n  get dataIcon(): ICONS {\n    return this._dataIcon;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'src/styles/theme';\n\n.wrapper {\n  width: 100%;\n  height: 10%;\n  background-color: #ffffff;\n  margin-top: px2em(10);\n  border-radius: 5px;\n\n  .container {\n    @extend %d-grid;\n    grid-template-columns: 1fr 11fr;\n    padding-right: px2em(10);\n\n    .left-block {\n      margin-left: px2em(20);\n      @extend %d-flex-start;\n      span{\n\n      }\n      .circle {\n        @extend %d-flex-center;\n        width: 30px;\n        height: 30px;\n        border-radius: 50%;\n        background-color: #fdecf5;\n      }\n    }\n\n    .right-block {\n      @extend %d-flex-between;\n\n      span {\n        margin-left: px2em(20);\n        overflow: hidden;\n        width: 70%;\n        white-space: nowrap;\n        text-overflow: ellipsis;\n      }\n    }\n  }\n}\n\n",
                    "styleUrl": "leader-board.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 14
            },
            "accessors": {
                "li": {
                    "name": "li",
                    "setSignature": {
                        "name": "li",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 20,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "li",
                        "type": "",
                        "returnType": "Board",
                        "line": 24
                    }
                },
                "ind": {
                    "name": "ind",
                    "setSignature": {
                        "name": "ind",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "number"
                            }
                        ],
                        "returnType": "void",
                        "line": 29,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "number",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "ind",
                        "type": "number",
                        "returnType": "number",
                        "line": 33
                    }
                },
                "dataIcon": {
                    "name": "dataIcon",
                    "getSignature": {
                        "name": "dataIcon",
                        "type": "",
                        "returnType": "ICONS",
                        "line": 37
                    }
                }
            },
            "templateData": "<div class=\"wrapper\">\n  <div class=\"container\">\n    <div class=\"left-block\">\n      <span>{{ind}}.</span>\n      <div class=\"circle\">\n        <svg-icon width=\"20\" height=\"20\" [name]=\"dataIcon\"></svg-icon>\n      </div>\n    </div>\n    <div class=\"right-block\">\n      <span>{{li.text}}</span>\n      <pre>62.4h</pre>\n\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "LibBadgesComponent",
            "id": "component-LibBadgesComponent-e91f2f4c8fa34ad2ccf364b0a29f348e",
            "file": "projects/lib-badges/src/lib/lib-badges.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "mylib-lib-badges",
            "styleUrls": [],
            "styles": [],
            "template": "<mylib-badges *ngFor=\"let badge of badges\" [badge]=\"badge\"></mylib-badges>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_badges",
                    "defaultValue": "this.badgesService.getBadges()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { BadgesService } from 'projects/lib-badges/src/lib/services/badges.service';\nimport { Badge } from 'projects/lib-badges/src/lib/services/badges.service';\n\n@Component({\n  selector: 'mylib-lib-badges',\n  template: `\n    <mylib-badges *ngFor=\"let badge of badges\" [badge]=\"badge\"></mylib-badges>\n  `,\n  styles: []\n})\nexport class LibBadgesComponent {\n  private _badges = this.badgesService.getBadges();\n\n  constructor(private badgesService: BadgesService) {\n  }\n\n  get badges(): Badge[] {\n    return this._badges;\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "badgesService",
                        "type": "BadgesService"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "badgesService",
                        "type": "BadgesService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "badges": {
                    "name": "badges",
                    "getSignature": {
                        "name": "badges",
                        "type": "[]",
                        "returnType": "Badge[]",
                        "line": 18
                    }
                }
            }
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-45bf2f86a5c1eddd275516c787312393",
            "file": "src/layouts/auth/pages/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "login-form",
            "styleUrls": [],
            "styles": [],
            "template": "<auth-form [data]=\"formData\"></auth-form>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "formData",
                    "type": "AuthFormData",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { AuthFormData } from 'src/layouts/auth/models/interfaces';\n\n@Component({\n  selector: 'login-form',\n  template: '<auth-form [data]=\"formData\"></auth-form>',\n})\nexport class LoginComponent {\n  constructor() {\n    this.formData = {\n      title: 'Sign In',\n      oppositeFormName: 'Sign Up',\n      oppositeFormLink: '/register',\n      submitButtonLink: '/user'\n    };\n  }\n\n  formData: AuthFormData;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            }
        },
        {
            "name": "NotFoundPageComponent",
            "id": "component-NotFoundPageComponent-d8c2af6cd98ee180be26b273d5fdfd21",
            "file": "src/shared/components/not-found-page/not-found-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "not-found-page",
            "styleUrls": [
                "./not-found-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./not-found-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'not-found-page',\n  templateUrl: './not-found-page.component.html',\n  styleUrls: ['./not-found-page.component.scss']\n})\n\nexport class NotFoundPageComponent {\n  constructor() {\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"src/styles/theme\";\n\n.container-error {\n  height: 100%;\n  @extend %d-flex-column-center;\n  .block_error{\n    padding: px2em(30);\n    @extend %d-flex-column-center;\n    height: 20%;\n    border: px2em(1) solid black;\n  }\n  h1 {\n    font: {\n      size: px2em(110);\n    }\n    margin-bottom: px2em(6);\n  }\n\n  h2 {\n    font: {\n      size: px2em(30);\n    }\n  }\n\n\n}\n",
                    "styleUrl": "./not-found-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            },
            "templateData": "<div class=\"container-error\">\n  <div class=\"block_error\">\n    <h1>404</h1>\n    <h2>Not Found</h2>\n    <p>The resource requested could not be found on this server!</p>\n  </div>\n</div>\n"
        },
        {
            "name": "OverviewPageComponent",
            "id": "component-OverviewPageComponent-931f40f23e35d703e2a070f26520499f",
            "file": "src/layouts/user/pages/overview-page/overview-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "overview-page",
            "styleUrls": [
                "./overview-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./overview-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14
                },
                {
                    "name": "redirectToSetting",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'overview-page',\n  templateUrl: './overview-page.component.html',\n  styleUrls: ['./overview-page.component.scss']\n})\nexport class OverviewPageComponent implements OnInit {\n\n  constructor(private router: Router) {\n  }\n\n  ngOnInit(): void {\n  }\n\n  redirectToSetting(): void {\n    this.router.navigate(['user/settings']);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"src/styles/theme\";\n\n\n.container{\n  height: 100%;\n  @extend %d-flex-center;\n}\n",
                    "styleUrl": "./overview-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class = \"container\">\n  <button (click)=\"redirectToSetting()\">SettingPage</button>\n</div>\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-8f196770333aa216860a88c0b6b221aa",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 64,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 73,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 67,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 70,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nh2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\np {\n  margin: 1em 0;\n}\n\na {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nli {\n  margin-bottom: 8px;\n}\n\n.tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "ProfilePageComponent",
            "id": "component-ProfilePageComponent-913c0abf89ed4c18187e134134dcb53c",
            "file": "src/layouts/user/pages/profile-page/profile-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "profile-page",
            "styleUrls": [
                "./profile-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./profile-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_home",
                    "defaultValue": "ICONS.HOME",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_title",
                    "defaultValue": "'Profile'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "badges",
                    "defaultValue": "this.badgesService.getBadges()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "cards",
                    "defaultValue": "this.cardSkillsService.getCards()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "lists",
                    "defaultValue": "this.leaderBoardService.getList()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { ICONS } from 'src/shared/components/svg-icon/icons-list';\nimport { CardSkillsService } from 'src/layouts/user/pages/profile-page/services/card-skills.service';\nimport { LeaderBoardService } from 'src/layouts/user/pages/profile-page/services/leader-board.service';\nimport { BadgesService } from 'src/layouts/user/pages/profile-page/services/badges.service';\n\n\n@Component({\n  selector: 'profile-page',\n  templateUrl: './profile-page.component.html',\n  styleUrls: ['./profile-page.component.scss']\n})\n\nexport class ProfilePageComponent {\n  private _title = 'Profile';\n  private _home = ICONS.HOME;\n  public cards = this.cardSkillsService.getCards();\n  public lists = this.leaderBoardService.getList();\n  public badges = this.badgesService.getBadges();\n\n\n  constructor(private cardSkillsService: CardSkillsService,\n              private leaderBoardService: LeaderBoardService,\n              private badgesService: BadgesService) {}\n\n  get homeIcon(): ICONS {\n    return this._home;\n  }\n\n  get title(): string {\n    return this._title;\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"src/styles/theme\";\n\n.wrapper {\n  height: 100%;\n  background-color: #f5f5f5;\n\n  .page {\n    @extend %d-grid;\n    grid-template-rows: px2em(60) auto;\n\n    .title {\n      @extend %d-flex-start;\n      height: 100%;\n      margin-left: 4.5%;\n      font: {\n        family: $base-regular-font;\n        size: px2em(28);\n        weight: 300;\n      }\n\n      span {\n        margin-left: px2em(5);\n      }\n    }\n\n    .main {\n      @extend %d-grid;\n      grid-template-columns: 2fr 9fr 2fr;\n      grid-column-gap: $lg-screen-gutter;\n\n      .left-block {\n\n      }\n\n      .center-block {\n        @extend %d-grid;\n        grid-template-rows: px2em(250) auto;\n\n        .center-block-title {\n          padding-left: px2em(30);\n          @extend %d-flex-between;\n\n          span {\n            color: #2979ff;\n            cursor: pointer;\n            margin-right: px2em(25);\n          }\n        }\n\n        .center-block_row {\n          overflow: scroll;\n\n          .cards-block {\n            display: flex;\n            flex-wrap: wrap;\n          }\n        }\n\n        .center-block_columns {\n          @extend %d-grid;\n          grid-template-columns: 5fr 7fr;\n\n          .center-block_left {\n            padding: px2em(30);\n          }\n\n          .center-block_right {\n            padding: px2em(30);\n          }\n\n        }\n      }\n\n      .right-block {\n        @extend %d-grid;\n        grid-template-rows: px2em(20) auto;\n        @extend %d-flex-line-center;\n\n        span {\n          @extend %d-flex-line-center;\n        }\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./profile-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "cardSkillsService",
                        "type": "CardSkillsService"
                    },
                    {
                        "name": "leaderBoardService",
                        "type": "LeaderBoardService"
                    },
                    {
                        "name": "badgesService",
                        "type": "BadgesService"
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "cardSkillsService",
                        "type": "CardSkillsService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "leaderBoardService",
                        "type": "LeaderBoardService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "badgesService",
                        "type": "BadgesService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "homeIcon": {
                    "name": "homeIcon",
                    "getSignature": {
                        "name": "homeIcon",
                        "type": "",
                        "returnType": "ICONS",
                        "line": 26
                    }
                },
                "title": {
                    "name": "title",
                    "getSignature": {
                        "name": "title",
                        "type": "string",
                        "returnType": "string",
                        "line": 30
                    }
                }
            },
            "templateData": "<div class=\"wrapper\">\n  <div class=\"page\">\n    <div class=\"title\">\n      <svg-icon width=\"18\" height=\"18\" [name]=\"homeIcon\"></svg-icon>\n      <span>{{title}}</span>\n    </div>\n    <div class=\"main\">\n      <div class=\"left-block\">\n        <circle-profile></circle-profile>\n        <circle-completed></circle-completed>\n      </div>\n      <div class=\"center-block\">\n        <div class=\"center-block_row\">\n          <div class=\"center-block-title\">\n            <h3>Skills Acquired ({{cards.length}})</h3>\n            <span>View all</span>\n          </div>\n          <div class=\"cards-block\">\n            <card-skills *ngFor=\"let card of cards\" [card]=\"card\"></card-skills>\n          </div>\n        </div>\n        <div class=\"center-block_columns\">\n          <div class=\"center-block_left\">\n            <span>Roles eligible</span>\n            <roles-eligible></roles-eligible>\n          </div>\n          <div class=\"center-block_right\">\n            <span>Leaderboard</span>\n            <leader-board *ngFor=\"let li of lists;let i = index\" [li]=\"li\" [ind]=\"i+1\"></leader-board>\n          </div>\n        </div>\n      </div>\n      <div class=\"right-block\">\n        <span>Badges ({{badges.length}})</span>\n        <app-badges *ngFor=\"let badge of badges\" [badge]=\"badge\"></app-badges>\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "RegisterComponent",
            "id": "component-RegisterComponent-3209cce58974d00ca2cdae943d984156",
            "file": "src/layouts/auth/pages/register/register.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "register-form",
            "styleUrls": [],
            "styles": [],
            "template": "<auth-form [data]=\"formData\"></auth-form>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "formData",
                    "type": "AuthFormData",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { AuthFormData } from 'src/layouts/auth/models/interfaces';\n\n@Component({\n  selector: 'register-form',\n  template: '<auth-form [data]=\"formData\"></auth-form>',\n})\nexport class RegisterComponent {\n  constructor() {\n    this.formData = {\n      title: 'Sign Up',\n      oppositeFormName: 'Sign In',\n      oppositeFormLink: '/login',\n      submitButtonLink: '/user'\n    };\n  }\n\n  formData: AuthFormData;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            }
        },
        {
            "name": "RolesEligibleComponent",
            "id": "component-RolesEligibleComponent-ccf88ac789582b73b385c410df798e0e",
            "file": "src/layouts/user/pages/profile-page/components/roles-eligible/roles-eligible.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "roles-eligible",
            "styleUrls": [
                "roles-eligible.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "roles-eligible.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_dataIcon",
                    "defaultValue": "ICONS.BANK",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { ICONS } from 'src/shared/components/svg-icon/icons-list';\n\n@Component({\n  selector: 'roles-eligible',\n  templateUrl: 'roles-eligible.component.html',\n  styleUrls: ['roles-eligible.component.scss']\n})\n\nexport class RolesEligibleComponent {\n  private _dataIcon = ICONS.BANK;\n\n  constructor() {\n  }\n\n  get dataIcon(): ICONS {\n    return this._dataIcon;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'src/styles/theme';\n\n.wrapper {\n  width: 80%;\n  height: 10%;\n  background-color: #ffffff;\n  margin-top: px2em(10);\n  border-radius: 5px;\n\n  .container {\n      @extend %d-grid;\n      grid-template-columns: 1fr 5fr;\n    .left-block{\n      @extend %d-flex-center;\n      .circle{\n        @extend %d-flex-center;\n        width: 30px;\n        height: 30px;\n        border-radius: 50%;\n        background-color: #fdecf5;\n      }\n    }\n    .right-block{\n      @extend %d-flex-align-center\n    }\n  }\n}\n\n",
                    "styleUrl": "roles-eligible.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 11
            },
            "accessors": {
                "dataIcon": {
                    "name": "dataIcon",
                    "getSignature": {
                        "name": "dataIcon",
                        "type": "",
                        "returnType": "ICONS",
                        "line": 16
                    }
                }
            },
            "templateData": "<div class=\"wrapper\">\n  <div class=\"container\">\n    <div class=\"left-block\">\n      <div class=\"circle\">\n        <svg-icon width=\"20\" height=\"20\" [name]=\"dataIcon\"></svg-icon>\n      </div>\n\n    </div>\n    <div class=\"right-block\">Data Practitioners</div>\n  </div>\n</div>\n"
        },
        {
            "name": "RolesPageComponent",
            "id": "component-RolesPageComponent-94ab9bb43ed6a2abf5c61e819c3a6cd3",
            "file": "src/layouts/admin/pages/roles/roles-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "roles-page",
            "styleUrls": [
                "./roles-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./roles-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'roles-page',\n  templateUrl: './roles-page.component.html',\n  styleUrls: ['./roles-page.component.scss']\n})\nexport class RolesPageComponent {\n  constructor() {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./roles-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "templateData": "<div>\n  roles-page is working\n</div>\n"
        },
        {
            "name": "SettingsPageComponent",
            "id": "component-SettingsPageComponent-c15d51219547d3ebca4e0514e66de3e5",
            "file": "src/layouts/user/pages/settings-page/settings-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "settings-page",
            "styleUrls": [
                "./settings-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./settings-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14
                },
                {
                    "name": "redirectToOverview",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'settings-page',\n  templateUrl: './settings-page.component.html',\n  styleUrls: ['./settings-page.component.scss']\n})\nexport class SettingsPageComponent implements OnInit {\n\n  constructor(private router: Router) {\n  }\n\n  ngOnInit(): void {\n  }\n\n  redirectToOverview(): void {\n    this.router.navigate(['user/overview']);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"src/styles/theme\";\n\n.wrapper {\n  height: 100%;\n  background-color: $setting-background-color;\n\n  .page {\n    @extend %d-grid;\n    grid-template-rows: px2em(60) auto;\n\n    .title {\n      @extend %d-flex-between;\n      height: 100%;\n      font: {\n        family: $base-regular-font;\n        size: px2em(20);\n        weight: 300;\n      }\n\n      span {\n        margin-left: $lg-screen-gutter;\n      }\n\n      button {\n        margin-right: $lg-screen-gutter;\n      }\n    }\n\n    .main {\n      @extend %d-grid;\n      grid-template-columns: 7fr 5fr;\n      grid-column-gap: $lg-screen-gutter;\n\n      .left-block {\n        @extend %d-flex-center;\n        background-color: #eee; //todo: REMOVE TEMPORARY!!!\n      }\n\n      .right-block {\n        @extend %d-flex-center;\n        background-color: #eee; //todo: REMOVE TEMPORARY!!!\n      }\n    }\n  }\n}\n\n",
                    "styleUrl": "./settings-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"wrapper\">\n  <div class=\"page\">\n    <div class=\"title\">\n      <span>Settings</span>\n      <button (click)=\"redirectToOverview()\">OverviewPage</button>\n    </div>\n    <div class=\"main\">\n      <div class=\"left-block\">\n        left\n      </div>\n      <div class=\"right-block\">\n        right\n      </div>\n    </div>\n  </div>\n</div>\n\n"
        },
        {
            "name": "SvgIconComponent",
            "id": "component-SvgIconComponent-58486a647412fa3d7ced4ea750ecc620",
            "file": "src/shared/components/svg-icon/svg-icon.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "svg-icon",
            "styleUrls": [
                "./svg-icon.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./svg-icon.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "fill",
                    "line": 47,
                    "type": "string"
                },
                {
                    "name": "height",
                    "line": 38,
                    "type": "string"
                },
                {
                    "name": "name",
                    "line": 20,
                    "type": ""
                },
                {
                    "name": "width",
                    "line": 29,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_fill",
                    "defaultValue": "'fill:#black'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_height",
                    "defaultValue": "'16'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_name",
                    "type": "ICONS",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_width",
                    "defaultValue": "'16'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { ICONS } from 'src/shared/components/svg-icon/icons-list';\n\n@Component({\n  selector: 'svg-icon',\n  templateUrl: './svg-icon.component.html',\n  styleUrls: ['./svg-icon.component.scss']\n})\nexport class SvgIconComponent implements OnInit {\n  private _name: ICONS;\n  private _width = '16';\n  private _height = '16';\n  private _fill = 'fill:#black';\n\n\n  constructor() {\n  }\n\n  @Input()\n  set name(value: ICONS) {\n    this._name = value;\n  }\n\n  get name(): ICONS {\n    return this._name;\n  }\n\n  @Input()\n  set width(value: string) {\n    this._width = value;\n  }\n\n  get width(): string {\n    return this._width;\n  }\n\n  @Input()\n  set height(value: string) {\n    this._height = value;\n  }\n\n  get height(): string {\n    return this._height;\n  }\n\n  @Input()\n  set fill(value: string) {\n    this._fill = value;\n  }\n\n  get fill(): string {\n    return this._fill;\n  }\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"src/styles/theme\";\n\nsvg {\n  @extend %d-flex-center\n\n\n}\n",
                    "styleUrl": "./svg-icon.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 13
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "name": {
                    "name": "name",
                    "setSignature": {
                        "name": "name",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 20,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "name",
                        "type": "",
                        "returnType": "ICONS",
                        "line": 24
                    }
                },
                "width": {
                    "name": "width",
                    "setSignature": {
                        "name": "width",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 29,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "width",
                        "type": "string",
                        "returnType": "string",
                        "line": 33
                    }
                },
                "height": {
                    "name": "height",
                    "setSignature": {
                        "name": "height",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 38,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "height",
                        "type": "string",
                        "returnType": "string",
                        "line": 42
                    }
                },
                "fill": {
                    "name": "fill",
                    "setSignature": {
                        "name": "fill",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 47,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "fill",
                        "type": "string",
                        "returnType": "string",
                        "line": 51
                    }
                }
            },
            "templateData": "<svg [style]=\"fill\" [style.width]=\"width\" [style.height]=\"height\">\n  <use [attr.xlink:href]=\"'/assets/icons/sprites.svg#' + name\"></use>\n</svg>\n"
        },
        {
            "name": "SvgIconComponent",
            "id": "component-SvgIconComponent-e55c26c831af0bdb6996801a00d2c84c-1",
            "file": "projects/lib-badges/src/lib/shared/svg-icon/svg-icon.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "mylib-svg-icon",
            "styleUrls": [
                "./svg-icon.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./svg-icon.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "fill",
                    "line": 47,
                    "type": "string"
                },
                {
                    "name": "height",
                    "line": 38,
                    "type": "string"
                },
                {
                    "name": "name",
                    "line": 20,
                    "type": ""
                },
                {
                    "name": "width",
                    "line": 29,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_fill",
                    "defaultValue": "'fill:#black'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_height",
                    "defaultValue": "'16'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_name",
                    "type": "ICONS",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_width",
                    "defaultValue": "'16'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { ICONS } from 'projects/lib-badges/src/lib/shared/svg-icon/icons-list';\n\n@Component({\n  selector: 'mylib-svg-icon',\n  templateUrl: './svg-icon.component.html',\n  styleUrls: ['./svg-icon.component.scss']\n})\nexport class SvgIconComponent implements OnInit {\n  private _name: ICONS;\n  private _width = '16';\n  private _height = '16';\n  private _fill = 'fill:#black';\n\n\n  constructor() {\n  }\n\n  @Input()\n  set name(value: ICONS) {\n    this._name = value;\n  }\n\n  get name(): ICONS {\n    return this._name;\n  }\n\n  @Input()\n  set width(value: string) {\n    this._width = value;\n  }\n\n  get width(): string {\n    return this._width;\n  }\n\n  @Input()\n  set height(value: string) {\n    this._height = value;\n  }\n\n  get height(): string {\n    return this._height;\n  }\n\n  @Input()\n  set fill(value: string) {\n    this._fill = value;\n  }\n\n  get fill(): string {\n    return this._fill;\n  }\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"~projects/lib-badges/src/styles/theme\";\n\nsvg {\n  @extend %d-flex-center !optional\n}\n",
                    "styleUrl": "./svg-icon.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 13
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "name": {
                    "name": "name",
                    "setSignature": {
                        "name": "name",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 20,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "name",
                        "type": "",
                        "returnType": "ICONS",
                        "line": 24
                    }
                },
                "width": {
                    "name": "width",
                    "setSignature": {
                        "name": "width",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 29,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "width",
                        "type": "string",
                        "returnType": "string",
                        "line": 33
                    }
                },
                "height": {
                    "name": "height",
                    "setSignature": {
                        "name": "height",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 38,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "height",
                        "type": "string",
                        "returnType": "string",
                        "line": 42
                    }
                },
                "fill": {
                    "name": "fill",
                    "setSignature": {
                        "name": "fill",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 47,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "fill",
                        "type": "string",
                        "returnType": "string",
                        "line": 51
                    }
                }
            },
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "SvgIconComponent-1",
            "templateData": "<svg [style]=\"fill\" [style.width]=\"width\" [style.height]=\"height\">\n  <use [attr.xlink:href]=\"'/assets/icons/sprites.svg#' + name\"></use>\n</svg>\n"
        },
        {
            "name": "UserLayoutComponent",
            "id": "component-UserLayoutComponent-031779e1742d14fb95a060c19a3f1c44",
            "file": "src/layouts/user/user-layout.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "user-layout",
            "styleUrls": [
                "./user-layout.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./user-layout.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'Angular Best Practices'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'user-layout',\n  templateUrl: './user-layout.component.html',\n  styleUrls: ['./user-layout.component.scss']\n})\nexport class UserLayoutComponent implements OnInit {\n\n  constructor() { }\n\n  title = 'Angular Best Practices';\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"src/styles/theme\";\n\n.grid-container {\n  height: 100%;\n  display: grid;\n  grid-gap: px2em(10);\n  grid-template-rows: px2em(60) auto px2em(40);\n  background-color: $layout-background-color;\n\n  shared-header {\n    background-color: $user-header-background-color;\n  }\n\n  footer {\n    @extend %d-flex-start;\n    background-color: $footer-background-color;\n\n    span {\n      margin-left: $lg-screen-gutter;\n    }\n  }\n}\n",
                    "styleUrl": "./user-layout.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"grid-container\">\n  <shared-header [title]=\"title\"></shared-header>\n  <div class=\"main\">\n    <router-outlet></router-outlet>\n  </div>\n  <footer>\n    <span>Footer</span>\n  </footer>\n</div>\n\n\n\n"
        },
        {
            "name": "UsersPageComponent",
            "id": "component-UsersPageComponent-53c1ec599d82a80606520c7fe053aa3d",
            "file": "src/layouts/admin/pages/users/users-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "users-page",
            "styleUrls": [
                "./users-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./users-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'users-page',\n  templateUrl: './users-page.component.html',\n  styleUrls: ['./users-page.component.scss']\n})\nexport class UsersPageComponent {\n  constructor() {\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "table {\n  width: 100%;\n}\n",
                    "styleUrl": "./users-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "templateData": "<user-table></user-table>\n"
        },
        {
            "name": "UserTableComponent",
            "id": "component-UserTableComponent-a1573e1ed6569dbc313da49c726c8ee9",
            "file": "src/layouts/admin/pages/users/components/user-table.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "user-table",
            "styleUrls": [
                "./user-table.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./user-table.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dataSource",
                    "defaultValue": "this.mockDataTableService.getData()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "displayedColumns",
                    "defaultValue": "['email', 'role', 'toggle']",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { MockDataTableService } from 'src/layouts/admin/pages/users/services/mock-data-table.service';\n\n@Component({\n  selector: 'user-table',\n  templateUrl: './user-table.component.html',\n  styleUrls: ['./user-table.component.scss']\n})\n\nexport class UserTableComponent {\n  displayedColumns: string[] = ['email', 'role', 'toggle'];\n  dataSource = this.mockDataTableService.getData();\n  constructor(private mockDataTableService: MockDataTableService) {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "table{\n  width: 100%;\n}\n",
                    "styleUrl": "./user-table.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "mockDataTableService",
                        "type": "MockDataTableService"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "mockDataTableService",
                        "type": "MockDataTableService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<table mat-table [dataSource]=\"dataSource\" class=\"mat-elevation-z8\">\n\n  <ng-container matColumnDef=\"email\">\n    <th mat-header-cell *matHeaderCellDef> Email</th>\n    <td mat-cell *matCellDef=\"let element\"> {{element.email}} </td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"role\">\n    <th mat-header-cell *matHeaderCellDef> Role</th>\n    <td mat-cell *matCellDef=\"let element\"> {{element.role}} </td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"toggle\">\n    <th mat-header-cell *matHeaderCellDef>\n      Active\n    </th>\n    <td mat-cell *matCellDef=\"let row\">\n      <mat-slide-toggle [checked]=\"row.active\"></mat-slide-toggle>\n    </td>\n  </ng-container>\n\n  <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n  <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n</table>\n"
        }
    ],
    "modules": [
        {
            "name": "AdminModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AdminLayoutComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AdminRoutingModule"
                        },
                        {
                            "name": "RolesPageModule"
                        },
                        {
                            "name": "SharedModule"
                        },
                        {
                            "name": "UsersPageModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AdminRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AdminModule"
                        },
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "AuthModule"
                        },
                        {
                            "name": "SharedModule"
                        },
                        {
                            "name": "UserModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AuthModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AuthFormComponent"
                        },
                        {
                            "name": "AuthLayoutComponent"
                        },
                        {
                            "name": "LoginComponent"
                        },
                        {
                            "name": "RegisterComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AuthRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AuthRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LibBadgesModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "BadgesService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BadgesComponent"
                        },
                        {
                            "name": "LibBadgesComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LibBadgesComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "OverviewPageModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "OverviewPageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "OverviewPageComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ProfilePageModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "BadgesService"
                        },
                        {
                            "name": "CardSkillsService"
                        },
                        {
                            "name": "LeaderBoardService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BadgesComponent"
                        },
                        {
                            "name": "CardSkillsComponent"
                        },
                        {
                            "name": "CircleCompletedComponent"
                        },
                        {
                            "name": "CircleProfileComponent"
                        },
                        {
                            "name": "LeaderBoardComponent"
                        },
                        {
                            "name": "ProfilePageComponent"
                        },
                        {
                            "name": "RolesEligibleComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ProfilePageComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RolesPageModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "RolesPageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "RolesPageComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SettingsPageModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SettingsPageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SettingsPageComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NotFoundPageComponent"
                        },
                        {
                            "name": "SvgIconComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NotFoundPageComponent"
                        },
                        {
                            "name": "SvgIconComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UserModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "UserLayoutComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "OverviewPageModule"
                        },
                        {
                            "name": "ProfilePageModule"
                        },
                        {
                            "name": "SettingsPageModule"
                        },
                        {
                            "name": "SharedModule"
                        },
                        {
                            "name": "UserRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UserRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UsersPageModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "MockDataTableService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "UserTableComponent"
                        },
                        {
                            "name": "UsersPageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "UsersPageComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lib-badges/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "literal type"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lib-badges/src/test.ts",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  props: args,\n})"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [
            {
                "name": "ICONS",
                "childs": [
                    {
                        "name": "ANGULAR",
                        "value": "angular"
                    },
                    {
                        "name": "ADD",
                        "value": "add"
                    },
                    {
                        "name": "SEARCH",
                        "value": "search"
                    },
                    {
                        "name": "CURSOR",
                        "value": "cursor"
                    },
                    {
                        "name": "BELL",
                        "value": "bell"
                    },
                    {
                        "name": "LIST",
                        "value": "list"
                    },
                    {
                        "name": "HOME",
                        "value": "home"
                    },
                    {
                        "name": "USER",
                        "value": "user"
                    },
                    {
                        "name": "BANK",
                        "value": "bank"
                    },
                    {
                        "name": "BROADCAST",
                        "value": "broadcast"
                    },
                    {
                        "name": "ANALYTICS",
                        "value": "analytics"
                    },
                    {
                        "name": "BICYCLE",
                        "value": "bicycle"
                    },
                    {
                        "name": "BOOK",
                        "value": "book"
                    },
                    {
                        "name": "STAR",
                        "value": "star"
                    },
                    {
                        "name": "EGG",
                        "value": "egg"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/shared/components/svg-icon/icons-list.ts"
            },
            {
                "name": "ICONS",
                "childs": [
                    {
                        "name": "ANGULAR",
                        "value": "angular"
                    },
                    {
                        "name": "ADD",
                        "value": "add"
                    },
                    {
                        "name": "SEARCH",
                        "value": "search"
                    },
                    {
                        "name": "CURSOR",
                        "value": "cursor"
                    },
                    {
                        "name": "BELL",
                        "value": "bell"
                    },
                    {
                        "name": "LIST",
                        "value": "list"
                    },
                    {
                        "name": "HOME",
                        "value": "home"
                    },
                    {
                        "name": "USER",
                        "value": "user"
                    },
                    {
                        "name": "BANK",
                        "value": "bank"
                    },
                    {
                        "name": "BROADCAST",
                        "value": "broadcast"
                    },
                    {
                        "name": "ANALYTICS",
                        "value": "analytics"
                    },
                    {
                        "name": "BICYCLE",
                        "value": "bicycle"
                    },
                    {
                        "name": "BOOK",
                        "value": "book"
                    },
                    {
                        "name": "STAR",
                        "value": "star"
                    },
                    {
                        "name": "EGG",
                        "value": "egg"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "projects/lib-badges/src/lib/shared/svg-icon/icons-list.ts"
            }
        ],
        "groupedVariables": {
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "literal type"
                }
            ],
            "projects/lib-badges/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lib-badges/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lib-badges/src/test.ts",
                    "type": "literal type"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  props: args,\n})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "src/shared/components/svg-icon/icons-list.ts": [
                {
                    "name": "ICONS",
                    "childs": [
                        {
                            "name": "ANGULAR",
                            "value": "angular"
                        },
                        {
                            "name": "ADD",
                            "value": "add"
                        },
                        {
                            "name": "SEARCH",
                            "value": "search"
                        },
                        {
                            "name": "CURSOR",
                            "value": "cursor"
                        },
                        {
                            "name": "BELL",
                            "value": "bell"
                        },
                        {
                            "name": "LIST",
                            "value": "list"
                        },
                        {
                            "name": "HOME",
                            "value": "home"
                        },
                        {
                            "name": "USER",
                            "value": "user"
                        },
                        {
                            "name": "BANK",
                            "value": "bank"
                        },
                        {
                            "name": "BROADCAST",
                            "value": "broadcast"
                        },
                        {
                            "name": "ANALYTICS",
                            "value": "analytics"
                        },
                        {
                            "name": "BICYCLE",
                            "value": "bicycle"
                        },
                        {
                            "name": "BOOK",
                            "value": "book"
                        },
                        {
                            "name": "STAR",
                            "value": "star"
                        },
                        {
                            "name": "EGG",
                            "value": "egg"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/shared/components/svg-icon/icons-list.ts"
                }
            ],
            "projects/lib-badges/src/lib/shared/svg-icon/icons-list.ts": [
                {
                    "name": "ICONS",
                    "childs": [
                        {
                            "name": "ANGULAR",
                            "value": "angular"
                        },
                        {
                            "name": "ADD",
                            "value": "add"
                        },
                        {
                            "name": "SEARCH",
                            "value": "search"
                        },
                        {
                            "name": "CURSOR",
                            "value": "cursor"
                        },
                        {
                            "name": "BELL",
                            "value": "bell"
                        },
                        {
                            "name": "LIST",
                            "value": "list"
                        },
                        {
                            "name": "HOME",
                            "value": "home"
                        },
                        {
                            "name": "USER",
                            "value": "user"
                        },
                        {
                            "name": "BANK",
                            "value": "bank"
                        },
                        {
                            "name": "BROADCAST",
                            "value": "broadcast"
                        },
                        {
                            "name": "ANALYTICS",
                            "value": "analytics"
                        },
                        {
                            "name": "BICYCLE",
                            "value": "bicycle"
                        },
                        {
                            "name": "BOOK",
                            "value": "book"
                        },
                        {
                            "name": "STAR",
                            "value": "star"
                        },
                        {
                            "name": "EGG",
                            "value": "egg"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "projects/lib-badges/src/lib/shared/svg-icon/icons-list.ts"
                }
            ]
        },
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/layouts/admin/admin-routing.module.ts",
                "module": "AdminRoutingModule",
                "children": [
                    {
                        "path": "",
                        "component": "AdminLayoutComponent",
                        "children": [
                            {
                                "path": "roles",
                                "loadChildren": "src/layouts/admin/pages/roles/roles-page.module#RolesPageModule"
                            },
                            {
                                "path": "users",
                                "loadChildren": "src/layouts/admin/pages/users/users-page.module#UsersPageModule"
                            }
                        ]
                    }
                ],
                "kind": "module"
            },
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "loadChildren": "src/layouts/auth/auth.module#AuthModule"
                    },
                    {
                        "path": "user",
                        "loadChildren": "src/layouts/user/user.module#UserModule"
                    },
                    {
                        "path": "admin",
                        "loadChildren": "src/layouts/admin/admin.module#AdminModule"
                    },
                    {
                        "path": "**",
                        "loadChildren": "src/shared/shared.module#SharedModule"
                    }
                ],
                "kind": "module"
            },
            {
                "name": "routes",
                "filename": "src/layouts/auth/auth-routing.module.ts",
                "module": "AuthRoutingModule",
                "children": [
                    {
                        "path": "",
                        "component": "AuthLayoutComponent",
                        "children": [
                            {
                                "path": "",
                                "redirectTo": "login",
                                "pathMatch": "full"
                            },
                            {
                                "path": "login",
                                "component": "LoginComponent"
                            },
                            {
                                "path": "register",
                                "component": "RegisterComponent"
                            }
                        ]
                    }
                ],
                "kind": "module"
            },
            {
                "name": "routes",
                "filename": "src/shared/shared-routing.module.ts",
                "module": "SharedRoutingModule",
                "children": [
                    {
                        "path": "",
                        "component": "NotFoundPageComponent"
                    }
                ],
                "kind": "module"
            },
            {
                "name": "routes",
                "filename": "src/layouts/user/user-routing.module.ts",
                "module": "UserRoutingModule",
                "children": [
                    {
                        "path": "",
                        "component": "UserLayoutComponent",
                        "children": [
                            {
                                "path": "",
                                "redirectTo": "overview",
                                "pathMatch": "full"
                            },
                            {
                                "path": "settings",
                                "loadChildren": "src/layouts/user/pages/settings-page/settings-page.module#SettingsPageModule"
                            },
                            {
                                "path": "profile",
                                "component": "ProfilePageComponent"
                            },
                            {
                                "path": "overview",
                                "loadChildren": "src/layouts/user/pages/overview-page/overview-page.module#OverviewPageModule"
                            }
                        ]
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/lib-badges/src/lib/badges/badges.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BadgesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/lib-badges/src/lib/lib-badges.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LibBadgesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/lib-badges/src/lib/services/badges.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BadgesService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/lib-badges/src/lib/services/badges.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Badge",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/lib-badges/src/lib/shared/svg-icon/svg-icon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SvgIconComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/lib-badges/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lib-badges/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/layouts/admin/admin-layout.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AdminLayoutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/layouts/admin/pages/roles/roles-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RolesPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/layouts/admin/pages/users/components/user-table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserTableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/layouts/admin/pages/users/services/mock-data-table.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MockDataTableService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/layouts/admin/pages/users/services/mock-data-table.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PeriodicElement",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/layouts/admin/pages/users/users-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UsersPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/layouts/auth/auth-layout.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AuthLayoutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/layouts/auth/components/auth-form/auth-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AuthFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/layouts/auth/models/interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AuthFormData",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/layouts/auth/pages/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/layouts/auth/pages/register/register.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegisterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/layouts/user/pages/overview-page/overview-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "OverviewPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/layouts/user/pages/profile-page/components/badges/badges.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BadgesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/layouts/user/pages/profile-page/components/card-skills/card-skills.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardSkillsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/layouts/user/pages/profile-page/components/circle-completed/circle-completed.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CircleCompletedComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/layouts/user/pages/profile-page/components/circle-profile/circle-profile.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CircleProfileComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/layouts/user/pages/profile-page/components/leader-board/leader-board.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LeaderBoardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/layouts/user/pages/profile-page/components/roles-eligible/roles-eligible.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RolesEligibleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/layouts/user/pages/profile-page/profile-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProfilePageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/layouts/user/pages/profile-page/services/badges.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BadgesService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/layouts/user/pages/profile-page/services/badges.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Badge",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/layouts/user/pages/profile-page/services/card-skills.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CardSkillsService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/layouts/user/pages/profile-page/services/card-skills.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Card",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/layouts/user/pages/profile-page/services/leader-board.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LeaderBoardService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/layouts/user/pages/profile-page/services/leader-board.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Board",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/layouts/user/pages/settings-page/settings-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SettingsPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/layouts/user/user-layout.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserLayoutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/shared/components/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/shared/components/header/links-list.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LinksList",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/shared/components/not-found-page/not-found-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NotFoundPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/shared/components/svg-icon/svg-icon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SvgIconComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}